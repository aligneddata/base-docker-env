version: '3'


# Note:
# devnet is a bridge created externally
# relies on a proxy-based dns to support host->instance uses

# Use example:
# docker-compose -f devnet.yml up --scale spark-worker=2 --scale kafka=2
# docker-compose --compatibility -f devnet.yml up ibmodm
# docker-compose --compatibility -f devnet.yml up ibmodm810

services:

  # docker container exec base-docker-env_busybox_1 ping spark-worker
  busybox:
    hostname: busybox
    image: busybox
    command: sleep infinity
    networks:
      - devnet

  mariadb:
    hostname: mariadb
    image: mariadb:10.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootlzm
    volumes:
      #- /home/docker-data/mariadb:/var/lib/mysql
      - mariadbvol:/var/lib/mysql
    ports:
      - 3306:3306
    networks:
      - devnet

  adminer:
    hostname: adminer
    image: adminer
    restart: always
    ports:
      - 58081:8080
    networks:
      - devnet

  postgres:
    hostname: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 55432:5432
      - 5432:5432
    volumes:
      #- /home/docker-data/postgres:/var/lib/postgresql/data
      - postgresvol:/var/lib/postgresql/data
    networks:
      - devnet

  spark:
    hostname: spark
    image: docker.io/bitnami/spark:3.2.1-debian-10-r38
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    #ports:
    #  - '58080:8080'
    networks:
      - devnet
    volumes:
      - ../try-spark:/try-spark
      - ../try-spark-w-scala:/try-spark-w-scala
      - ../spark-streaming-linkedin:/webvisits
    
  spark-worker:
    hostname: spark-worker
    image: docker.io/bitnami/spark:3.2.1-debian-10-r38
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - devnet
    volumes:
      - ../try-spark:/try-spark
      - ../try-spark-w-scala:/try-spark-w-scala
      - ../spark-streaming-linkedin:/webvisits

  spark-aux:
    hostname: spark-aux
    image: docker.io/bitnami/spark:3.2.1-debian-10-r38
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    #ports:
    #  - '58080:8080'
    networks:
      - devnet
    volumes:
      - ../try-spark:/try-spark
      - ../try-spark-w-scala:/try-spark-w-scala
      - ../spark-streaming-linkedin:/webvisits

  zookeeper:
    hostname: zookeeper
    image: 'bitnami/zookeeper:3.7'
    #ports:
    #  - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - devnet
  

  kafka:
    hostname: kafka
    image: 'bitnami/kafka:3'
    #ports:
    #  - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - devnet


  # kafka2:
  #   hostname: kafka2
  #   image: 'bitnami/kafka:3'
  #   #ports:
  #   #  - '9092:9092'
  #   environment:
  #     - KAFKA_BROKER_ID=2
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9092
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true      
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - devnet


  redis:
    hostname: redis
    image: 'redis:6.2.6'
    #ports:
    #  - '6379:6379'
    networks:
      - devnet


  memcached:
    hostname: memcached
    image: bitnami/memcached:1.6.12
    #ports:
    #  - '11211:11211' 
    networks:
      - devnet

  # 2024.10.29 Removed geode. Use the settings in repo geode-docker and refer to MY_README.md.

  ibmodm:
    hostname: ibmodm
    image: ibmcom/odm:8.11.1
    environment:
      - LICENSE=accept
      - SAMPLE=true
      - JVM_ARGS='-Xmx3000m' 
    ports:
      - 29060:9060
      - 29443:9443
    volumes:
      - /home/docker-data/ibmodm/dbdata:/config/dbdata/
      - /home/docker-data/ibmodm/apps:/apps
    networks:
      - devnet
    deploy:
      resources:
        limits:
          memory: 3072M
        reservations:
          memory: 2048M

  ibmodm810:
    hostname: ibmodm810
    image: ibmcom/odm:8.10.5.1_21.2.0-amd64
    environment:
      - LICENSE=accept
      - SAMPLE=true
      - JVM_ARGS='-Xmx3000m'
    ports:
      - 9060:9060
      - 9443:9443
    volumes:
      - /home/docker-data/ibmodm/dbdata810:/config/dbdata/
      - /home/docker-data/ibmodm/apps:/apps
    networks:
      - devnet
    deploy:
      resources:
        limits:
          memory: 3072M
        reservations:
          memory: 2048M

  jenkins:
    image: 'jenkins/jenkins:lts-jdk11'
    hostname: jenkins
    ports:
      - 52080:8080
      - 50000:50000
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - devnet
    extra_hosts:
      - "host.docker.internal:host-gateway"
    dns:
      - 8.8.8.8
      - 4.4.4.4
      - host.docker.internal

  ssh-agent:
    image: jenkins/ssh-agent
    hostname: ssh-agent
    networks:
      - devnet

  # docker run --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:1234' hashicorp/vault
  hashivault:
    image: 'hashicorp/vault:1.12'
    hostname: hashivault
    ports:
      - 8200:8200
    networks:
      - devnet
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
  

  oraclexe:
    image: 'gvenzl/oracle-xe'
    hostname: oraclexe
    ports:
      - 1521:1521
    volumes:
      - oravol:/u01/app/oracle/oradata
    environment:
      - ORACLE_PASSWORD=dev6688
    networks:
      - devnet

  debopr:
    hostname: debopr
    image: debian:12
    ports:
      - 1022:22
    networks:
      - devnet

  hab:
    hostname: hab
    image: fintech/hab:latest
    ports:
      - 1022:22
      - 28080:8080
    volumes:
      - oravol:/pub
    networks:
      - devnet

  samba:
    hostname: samba
    image: dockurr/samba
    container_name: samba
    environment:
      USER: "samba"
      PASS: ${DOCKER_SAMBA_SECRET}
    ports:
      - 445:445
    volumes:
      - /ext/sambashare:/storage
    networks:
      - devnet

#docker run -d -p 1521:1521 -e ORACLE_PASSWORD=<your password> -v oracle-volume:/u01/app/oracle/oradata gvenzl/oracle-xe:11


networks:
  devnet:

volumes:
  mariadbvol:
  postgresvol:
  jenkins_home:
  oravol:
